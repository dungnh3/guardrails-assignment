// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dungnh3/guardrails-assignment/internal/model"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/dungnh3/guardrails-assignment/internal/repository"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// CreateSourceRepository provides a mock function with given fields: ctx, sr
func (_m *IRepository) CreateSourceRepository(ctx context.Context, sr model.SourceRepository) (*model.SourceRepository, error) {
	ret := _m.Called(ctx, sr)

	var r0 *model.SourceRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.SourceRepository) *model.SourceRepository); ok {
		r0 = rf(ctx, sr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SourceRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.SourceRepository) error); ok {
		r1 = rf(ctx, sr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueuedTriggerRepository provides a mock function with given fields: ctx, limit
func (_m *IRepository) GetQueuedTriggerRepository(ctx context.Context, limit int) ([]model.Result, error) {
	ret := _m.Called(ctx, limit)

	var r0 []model.Result
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.Result); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSourceRepositoryById provides a mock function with given fields: ctx, id
func (_m *IRepository) GetSourceRepositoryById(ctx context.Context, id uint32) (*model.SourceRepository, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.SourceRepository
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *model.SourceRepository); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SourceRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResult provides a mock function with given fields: ctx, nextId, limit
func (_m *IRepository) ListResult(ctx context.Context, nextId uint32, limit int) ([]model.Result, error) {
	ret := _m.Called(ctx, nextId, limit)

	var r0 []model.Result
	if rf, ok := ret.Get(0).(func(context.Context, uint32, int) []model.Result); ok {
		r0 = rf(ctx, nextId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, int) error); ok {
		r1 = rf(ctx, nextId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSourceRepository provides a mock function with given fields: ctx, nextId, limit
func (_m *IRepository) ListSourceRepository(ctx context.Context, nextId uint32, limit int) ([]model.SourceRepository, error) {
	ret := _m.Called(ctx, nextId, limit)

	var r0 []model.SourceRepository
	if rf, ok := ret.Get(0).(func(context.Context, uint32, int) []model.SourceRepository); ok {
		r0 = rf(ctx, nextId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SourceRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, int) error); ok {
		r1 = rf(ctx, nextId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSourceRepository provides a mock function with given fields: ctx, id
func (_m *IRepository) RemoveSourceRepository(ctx context.Context, id uint32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transaction provides a mock function with given fields: txFunc
func (_m *IRepository) Transaction(txFunc func(repository.IRepository) error) error {
	ret := _m.Called(txFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(repository.IRepository) error) error); ok {
		r0 = rf(txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerScanRepository provides a mock function with given fields: ctx, result
func (_m *IRepository) TriggerScanRepository(ctx context.Context, result model.Result) (*model.Result, error) {
	ret := _m.Called(ctx, result)

	var r0 *model.Result
	if rf, ok := ret.Get(0).(func(context.Context, model.Result) *model.Result); ok {
		r0 = rf(ctx, result)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Result) error); ok {
		r1 = rf(ctx, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFindingsResultFailure provides a mock function with given fields: ctx, id, findings
func (_m *IRepository) UpdateFindingsResultFailure(ctx context.Context, id uint32, findings []model.Finding) error {
	ret := _m.Called(ctx, id, findings)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, []model.Finding) error); ok {
		r0 = rf(ctx, id, findings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFindingsResultSuccess provides a mock function with given fields: ctx, id
func (_m *IRepository) UpdateFindingsResultSuccess(ctx context.Context, id uint32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSourceRepositoryById provides a mock function with given fields: ctx, id, name, link
func (_m *IRepository) UpdateSourceRepositoryById(ctx context.Context, id uint32, name string, link string) (*model.SourceRepository, error) {
	ret := _m.Called(ctx, id, name, link)

	var r0 *model.SourceRepository
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string, string) *model.SourceRepository); ok {
		r0 = rf(ctx, id, name, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SourceRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, string, string) error); ok {
		r1 = rf(ctx, id, name, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
