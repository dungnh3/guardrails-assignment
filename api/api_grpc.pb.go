// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuardRailsServiceClient is the client API for GuardRailsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuardRailsServiceClient interface {
	CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*CreateRepositoryResponse, error)
	GetRepositoryById(ctx context.Context, in *GetRepositoryByIdRequest, opts ...grpc.CallOption) (*GetRepositoryByIdResponse, error)
	ListRepository(ctx context.Context, in *ListRepositoryRequest, opts ...grpc.CallOption) (*ListRepositoryResponse, error)
	UpdateRepository(ctx context.Context, in *UpdateRepositoryRequest, opts ...grpc.CallOption) (*UpdateRepositoryResponse, error)
	RemoveRepository(ctx context.Context, in *RemoveRepositoryRequest, opts ...grpc.CallOption) (*RemoveRepositoryResponse, error)
	TriggerScanRepository(ctx context.Context, in *TriggerScanRepositoryRequest, opts ...grpc.CallOption) (*TriggerScanRepositoryResponse, error)
	ListResult(ctx context.Context, in *ListResultRequest, opts ...grpc.CallOption) (*ListResultResponse, error)
}

type guardRailsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGuardRailsServiceClient(cc grpc.ClientConnInterface) GuardRailsServiceClient {
	return &guardRailsServiceClient{cc}
}

func (c *guardRailsServiceClient) CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*CreateRepositoryResponse, error) {
	out := new(CreateRepositoryResponse)
	err := c.cc.Invoke(ctx, "/operation.olympus.service.GuardRailsService/CreateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardRailsServiceClient) GetRepositoryById(ctx context.Context, in *GetRepositoryByIdRequest, opts ...grpc.CallOption) (*GetRepositoryByIdResponse, error) {
	out := new(GetRepositoryByIdResponse)
	err := c.cc.Invoke(ctx, "/operation.olympus.service.GuardRailsService/GetRepositoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardRailsServiceClient) ListRepository(ctx context.Context, in *ListRepositoryRequest, opts ...grpc.CallOption) (*ListRepositoryResponse, error) {
	out := new(ListRepositoryResponse)
	err := c.cc.Invoke(ctx, "/operation.olympus.service.GuardRailsService/ListRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardRailsServiceClient) UpdateRepository(ctx context.Context, in *UpdateRepositoryRequest, opts ...grpc.CallOption) (*UpdateRepositoryResponse, error) {
	out := new(UpdateRepositoryResponse)
	err := c.cc.Invoke(ctx, "/operation.olympus.service.GuardRailsService/UpdateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardRailsServiceClient) RemoveRepository(ctx context.Context, in *RemoveRepositoryRequest, opts ...grpc.CallOption) (*RemoveRepositoryResponse, error) {
	out := new(RemoveRepositoryResponse)
	err := c.cc.Invoke(ctx, "/operation.olympus.service.GuardRailsService/RemoveRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardRailsServiceClient) TriggerScanRepository(ctx context.Context, in *TriggerScanRepositoryRequest, opts ...grpc.CallOption) (*TriggerScanRepositoryResponse, error) {
	out := new(TriggerScanRepositoryResponse)
	err := c.cc.Invoke(ctx, "/operation.olympus.service.GuardRailsService/TriggerScanRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardRailsServiceClient) ListResult(ctx context.Context, in *ListResultRequest, opts ...grpc.CallOption) (*ListResultResponse, error) {
	out := new(ListResultResponse)
	err := c.cc.Invoke(ctx, "/operation.olympus.service.GuardRailsService/ListResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuardRailsServiceServer is the server API for GuardRailsService service.
// All implementations should embed UnimplementedGuardRailsServiceServer
// for forward compatibility
type GuardRailsServiceServer interface {
	CreateRepository(context.Context, *CreateRepositoryRequest) (*CreateRepositoryResponse, error)
	GetRepositoryById(context.Context, *GetRepositoryByIdRequest) (*GetRepositoryByIdResponse, error)
	ListRepository(context.Context, *ListRepositoryRequest) (*ListRepositoryResponse, error)
	UpdateRepository(context.Context, *UpdateRepositoryRequest) (*UpdateRepositoryResponse, error)
	RemoveRepository(context.Context, *RemoveRepositoryRequest) (*RemoveRepositoryResponse, error)
	TriggerScanRepository(context.Context, *TriggerScanRepositoryRequest) (*TriggerScanRepositoryResponse, error)
	ListResult(context.Context, *ListResultRequest) (*ListResultResponse, error)
}

// UnimplementedGuardRailsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGuardRailsServiceServer struct {
}

func (UnimplementedGuardRailsServiceServer) CreateRepository(context.Context, *CreateRepositoryRequest) (*CreateRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (UnimplementedGuardRailsServiceServer) GetRepositoryById(context.Context, *GetRepositoryByIdRequest) (*GetRepositoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryById not implemented")
}
func (UnimplementedGuardRailsServiceServer) ListRepository(context.Context, *ListRepositoryRequest) (*ListRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepository not implemented")
}
func (UnimplementedGuardRailsServiceServer) UpdateRepository(context.Context, *UpdateRepositoryRequest) (*UpdateRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (UnimplementedGuardRailsServiceServer) RemoveRepository(context.Context, *RemoveRepositoryRequest) (*RemoveRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRepository not implemented")
}
func (UnimplementedGuardRailsServiceServer) TriggerScanRepository(context.Context, *TriggerScanRepositoryRequest) (*TriggerScanRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerScanRepository not implemented")
}
func (UnimplementedGuardRailsServiceServer) ListResult(context.Context, *ListResultRequest) (*ListResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResult not implemented")
}

// UnsafeGuardRailsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuardRailsServiceServer will
// result in compilation errors.
type UnsafeGuardRailsServiceServer interface {
	mustEmbedUnimplementedGuardRailsServiceServer()
}

func RegisterGuardRailsServiceServer(s grpc.ServiceRegistrar, srv GuardRailsServiceServer) {
	s.RegisterService(&GuardRailsService_ServiceDesc, srv)
}

func _GuardRailsService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardRailsServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation.olympus.service.GuardRailsService/CreateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardRailsServiceServer).CreateRepository(ctx, req.(*CreateRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardRailsService_GetRepositoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardRailsServiceServer).GetRepositoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation.olympus.service.GuardRailsService/GetRepositoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardRailsServiceServer).GetRepositoryById(ctx, req.(*GetRepositoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardRailsService_ListRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardRailsServiceServer).ListRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation.olympus.service.GuardRailsService/ListRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardRailsServiceServer).ListRepository(ctx, req.(*ListRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardRailsService_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardRailsServiceServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation.olympus.service.GuardRailsService/UpdateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardRailsServiceServer).UpdateRepository(ctx, req.(*UpdateRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardRailsService_RemoveRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardRailsServiceServer).RemoveRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation.olympus.service.GuardRailsService/RemoveRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardRailsServiceServer).RemoveRepository(ctx, req.(*RemoveRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardRailsService_TriggerScanRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerScanRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardRailsServiceServer).TriggerScanRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation.olympus.service.GuardRailsService/TriggerScanRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardRailsServiceServer).TriggerScanRepository(ctx, req.(*TriggerScanRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardRailsService_ListResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardRailsServiceServer).ListResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation.olympus.service.GuardRailsService/ListResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardRailsServiceServer).ListResult(ctx, req.(*ListResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GuardRailsService_ServiceDesc is the grpc.ServiceDesc for GuardRailsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuardRailsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "operation.olympus.service.GuardRailsService",
	HandlerType: (*GuardRailsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepository",
			Handler:    _GuardRailsService_CreateRepository_Handler,
		},
		{
			MethodName: "GetRepositoryById",
			Handler:    _GuardRailsService_GetRepositoryById_Handler,
		},
		{
			MethodName: "ListRepository",
			Handler:    _GuardRailsService_ListRepository_Handler,
		},
		{
			MethodName: "UpdateRepository",
			Handler:    _GuardRailsService_UpdateRepository_Handler,
		},
		{
			MethodName: "RemoveRepository",
			Handler:    _GuardRailsService_RemoveRepository_Handler,
		},
		{
			MethodName: "TriggerScanRepository",
			Handler:    _GuardRailsService_TriggerScanRepository_Handler,
		},
		{
			MethodName: "ListResult",
			Handler:    _GuardRailsService_ListResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
